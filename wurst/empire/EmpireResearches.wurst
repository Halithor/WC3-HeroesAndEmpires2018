package EmpireResearches

import EmpireGlobals
import ChannelAbilityPreset
import initlater PlayerInfo
import Globals
import RegisterEvents
import HashMap
import Assets
import HotkeyUtil

int researchCount = 0
ResearchInfo array researches = []
HashMap<int, ResearchInfo> infoLookup = new HashMap<int, ResearchInfo>
HashMap<int, ResearchInfo> infoLookupFromPlaceholder = new HashMap<int, ResearchInfo>
real array multipliers = []

constant kAID_rCancelResearch = compiletime(ABIL_ID_GEN.next())
constant kAID_rFarming = compiletime(ABIL_ID_GEN.next())
constant kAID_rHousing = compiletime(ABIL_ID_GEN.next())
constant kAID_rCivilianBuildings = compiletime(ABIL_ID_GEN.next())
constant kAID_rLumberHarvesting = compiletime(ABIL_ID_GEN.next())
constant kAID_rDefensiveStructures = compiletime(ABIL_ID_GEN.next())
constant kAID_r = [
    kAID_rFarming,
    kAID_rHousing,
    kAID_rCivilianBuildings,
    kAID_rLumberHarvesting,
    kAID_rDefensiveStructures
]

public function getResearchCenterResearches() returns string
    return kAID_rCancelResearch.toRawCode()
        + "," + kAID_rHousing.toRawCode()
        + "," + kAID_rCivilianBuildings.toRawCode()
        + "," + kAID_rLumberHarvesting.toRawCode()
        + "," + kAID_rDefensiveStructures.toRawCode()
        + "," + kAID_rFarming.toRawCode()

public function getResearchInfo(int rid) returns ResearchInfo
    return infoLookup.get(rid)

public function getResearchInfoFromIndex(int idx) returns ResearchInfo
    return researches[idx]

class ResearchInfo
    int rid
    int maxLvl
    int index
    string name

    int costGoldBase = 0
    int costLumberBase = 0

    construct(string name, string tooltip, string icon, string hotkey, int rid, int aid, int maxLvl, int costGoldBase, int costLumberBase)
        this.rid = rid
        this.maxLvl = maxLvl
        this.costGoldBase = costGoldBase
        this.costLumberBase = costLumberBase
        this.index = researchCount
        this.name = name
        researches[this.index] = this
        researchCount += 1
        infoLookup.put(rid, this)
        infoLookupFromPlaceholder.put(aid, this)

        if compiletime
            var _def = new ChannelAbilityPreset(aid, 1, true)
                ..makeUnitSpell(0, 0)
                ..setIconNormal(icon)
                ..setTooltipNormal(1, "Research " + name + " [" + kStrGold + hotkey.toUpperCase() + "|r]")
                ..setTooltipNormalExtended(1, tooltip)
                ..setName(name)
                ..setHotkeyNormal(hotkey)
                ..setButtonPositionNormalX(getHotkeyX(hotkey))
                ..setButtonPositionNormalY(getHotkeyY(hotkey))

    
    function getMaxLevel() returns int
        return maxLvl

    function onTechFinished(player p, int _newLvl)
        enableResearchesForPlayer(p)
    
    function getTotalCostGold(int lvl) returns int
        return (costGoldBase.toReal() * multipliers[lvl]).round()
    
    function getTotalCostLumber() returns int
        return 0 // NOT IMPLEMENTED

function enableResearchesForPlayer(player p)
    for i = 0 to kResearchCount - 1
        SetPlayerAbilityAvailable(p, kAID_r[i], true)
    SetPlayerAbilityAvailable(p, kAID_rCancelResearch, false)

function disableResearchesForPlayer(player p)
    for i = 0 to kResearchCount - 1
        SetPlayerAbilityAvailable(p, kAID_r[i], false)
        SetPlayerAbilityAvailable(p, kAID_rCancelResearch, true)

function handleResearchFinished()
    let rid = GetResearched()
    let p = GetResearchingUnit().getOwner()
    // Needs to be an empire for this to care
    if isResearchAge(rid) and p.getRole() == PlayerRole.Empire
        int idx = getAgeIndex(rid)
        p.getEmpireInfo().setAge(idx)
        if idx < kAgeCount - 1
            SetPlayerTechMaxAllowed(p, kRID_Ages[idx + 1], 1)
        
function handleSpellCast()
    let center = GetSpellAbilityUnit()
    if center.getTypeId() == kUID_Struct_ResearchCenter
        let aid = GetSpellAbilityId()
        if aid == kAID_rCancelResearch
            // Cancel
            enableResearchesForPlayer(center.getOwner())
            center.getOwner().getEmpireInfo().setActiveResearchOff()
        else 
            // It's a normal research.
            let resInfo = infoLookupFromPlaceholder.get(aid)
            disableResearchesForPlayer(center.getOwner())
            center.getOwner().getEmpireInfo().setActiveResearch(resInfo.rid)


init
    genResearches()
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH, function handleResearchFinished)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST, function handleSpellCast)
    // Precompute powers for efficiency
    int maxLvl = 0
    for i = 0 to kResearchCount - 1
        let ri = researches[i]
        if ri.maxLvl > maxLvl
            maxLvl = ri.maxLvl
    multipliers[0] = 1.0
    multipliers[1] = 1.0
    for i = 2 to maxLvl
        multipliers[i] = multipliers[i - 1] * kResearchCostMultiplier

@compiletime function genResearches()
    new ChannelAbilityPreset(kAID_rCancelResearch, 1, true)
        ..makeUnitSpell(0, 0)
        ..setIconNormal(Icons.bTNCancel)
        ..setHotkeyNormal("V")
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setTooltipNormal(1, "Cancel Research [" + kStrGold +"V|r]")
        ..setTooltipNormalExtended(1, "Hault the current research effort. Progress will be saved for when you resume this research in the future.")
        ..setName("Cancel Research")
    // Research info involves the tooltips for the research, followed by the RID and AID that correspond
    // to the given research. The ability will be generated here, but the research should be defined elsewhere
    // After the ids, max level and cost follow.
    new ResearchInfo(
        "Improved Farming", 
        "Increases the amount of grain produced by farms by " + (kFoodUpgradeBonus * 100).toInt().toString() + "%.", 
        "ReplaceableTextures\\CommandButtons\\BTNINV_Misc_Food_Wheat_01.blp",
        "E", kRID_Farming, kAID_rFarming, 50, 50, 0)
    new ResearchInfo(
        "Improved Housing Capacity", 
        "Increases the citizens that can live in a house by 5%.", 
        Icons.bTNGenericHumanBuilding,
        "Q", kRID_Housing, kAID_rHousing, 50, 60, 0)
    new ResearchInfo(
        "Improved Civil Structures", 
        "Increases the hitpoints and armor of civil structures by 20%. Does not improve defense buildings.", 
        Icons.bTNStoneArchitecture,
        "W", kRID_CivilianBuildings, kAID_rCivilianBuildings, 50, 100, 0)
    new ResearchInfo(
        "Improved Lumber Harvesting", 
        "Increases the amount of lumber a worker can carry by 10 and increases the amount of lumber harvested.", 
        Icons.bTNHumanLumberUpgrade1,
        "R", kRID_LumberHarvesting, kAID_rLumberHarvesting, 50, 40, 0)
    new ResearchInfo(
        "Improved Defense Structures", 
        "Increases the hitpoints and armor of defense structures by 20%.", 
        Icons.bTNArcaniteArchitecture,
        "A", kRID_DefenseStructures, kAID_rDefensiveStructures, 50, 100, 0)



@compiletime function genAgeResearches()
    real goldCost = kAgeCostBaseGold.toReal()
    real lumberCost = kAgeCostBaseLumber.toReal()
    for i = 0 to kAgeCount - 1
        let _def = createObjectDefinition("w3q", kRID_Ages[i], 'Rhac')
            ..setLvlString("gef1", 0, "")
            ..setLvlString("gef2", 0, "")
            ..setLvlString("gcls", 0, "")
            ..setLvlInt("glvl", 0, 1) // max level
            ..setLvlInt("gtib", 0, 30 + i * 5) // research time
            ..setLvlInt("gtim", 0, 0) // time increase
            ..setLvlString("ghk1", 1, "A") // hotkey
            ..setLvlString("gnam", 1, kAgeNames[i]) // name 
            ..setLvlString("gtp1", 1, "Advance to the " + kAgeNames[i] + " [" + kStrGold + "A|r]") // tooltip
            ..setLvlString("gub1", 1, "Advancing new ages will unlock new technologies, units, and housing structures.") // ubertip
            ..setLvlInt("gbpx", 0, 0) // button x
            ..setLvlInt("gbpy", 0, 1) // button y
            ..setLvlInt("gglb", 0, goldCost.round()) // cost gold
            ..setLvlInt("gglm", 0, 0) // gold increment
            ..setLvlInt("glmb", 0, lumberCost.round()) // cost lumber
            ..setLvlInt("glmm", 0, 0) // lumber inc
            ..setLvlString("gar1", 1, Icons.bTNWispSplode) // Icon
        
        goldCost = goldCost * kAgeCostMultiplierGold + kAgeCostConstantGold
        lumberCost = lumberCost * kAgeCostMultiplierLumber + kAgeCostConstantLumber
            

