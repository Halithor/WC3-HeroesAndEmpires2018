package GameStart

import ObjectIdGenerator
import UnitObjEditing
import Assets
import ObjectIds
import Globals
import PlayerInfo
import TimerUtils
import EmpireSpawn
import HeroSpawn
import EmpireStartGame
import RegisterEvents


constant kSelectionTime = 30.0
constant kUID_Selector = compiletime(UNIT_ID_GEN.next())

// Role selection
constant kUID_RoleTavern = compiletime(UNIT_ID_GEN.next())
constant kUID_RoleHero = compiletime(UNIT_ID_GEN.next())
constant kUID_RoleEmpire = compiletime(UNIT_ID_GEN.next())

// Class selection
constant kUID_ClassTavern = compiletime(UNIT_ID_GEN.next())
constant kUID_ClassFighter = compiletime(UNIT_ID_GEN.next())
constant kUID_ClassRanger = compiletime(UNIT_ID_GEN.next())
constant kUID_ClassWizard = compiletime(UNIT_ID_GEN.next())
constant kUID_ClassRandom = compiletime(UNIT_ID_GEN.next())


timer selectionTimer
timerdialog selectionTimerDiag
unit array selectedUnit

trigger deselectTrigger
trigger roleSelectTrg
trigger classSelectionTrg

unit classTavern
player temp

int playersFinishedCount = 0

function spawnStartingUnits()
    ClearTextMessages()
    printTimed(kStrBlue + "Game start!", 10)
    CreateForce()
        ..enumPlayers(Filter(()-> GetFilterPlayer().isActive()))
        ..forEach(() -> begin
            if GetEnumPlayer().getRole() == PlayerRole.Empire
                BeginEmpireGameForPlayer(GetEnumPlayer())
            else
                BeginHeroGameForPlayer(GetEnumPlayer())
        end)
        ..destr()
    startEmpires()
    SetTimeOfDay(bj_TOD_DAWN)

function fixPlayerSelection(player user)
    getTimer()
        ..setData(user.getId())
        ..start(0.01, () -> begin
        player p = Player(GetExpiredTimer().getData())
        if selectedUnit[p.getId()] != null 
            if not IsUnitSelected(selectedUnit[p.getId()], p)
                SelectUnitForPlayerSingle(selectedUnit[p.getId()], p)
        else
            ClearSelectionForPlayer(p)
        GetExpiredTimer().release()
    end)
function pickRandomHeroClass() returns HeroClass
    // TODO DO THIS INTELLIGENTLY
    switch GetRandomInt(0, 2)
        case 0
            return HeroClass.Fighter
        case 1
            return HeroClass.Ranger
        case 2
            return HeroClass.Wizard
    return HeroClass.Fighter

function selectClass()
    let owner = GetSoldUnit().getOwner()
    switch GetSoldUnit().getTypeId()
        case kUID_ClassFighter
            owner.setHeroClass(HeroClass.Fighter)
        case kUID_ClassRanger
            owner.setHeroClass(HeroClass.Ranger)
        case kUID_ClassWizard
            owner.setHeroClass(HeroClass.Wizard)
        case kUID_ClassRandom
            skip // The finish selection will fix this.
            // owner.setHeroClass(pickRandomHeroClass())
    finishSelectionForPlayer(owner)
    

function finishSelectionForPlayer(player p)
    // Print selection
    if p.getRole() == PlayerRole.Empire
        printTimed(kStrBlue + p.getName() + " has selected the role of |r" + kStrGold + "Empire|r" + kStrBlue + ".", 30)
    else if p.getHeroClass() == HeroClass.NONE
        printTimed(kStrBlue + p.getName() + " has selected the role of |r" + kStrGold + "Hero|r" + kStrBlue + " a random class.", 30)
    else
        printTimed(kStrBlue + p.getName() + " has selected the role of |r" + kStrGold + "Hero|r" + kStrBlue + " with class |r" + kStrGold + p.getHeroClass().getName() + kStrBlue + ".", 30)
    // Destroy all units owned by that player.
    temp = p
    let grp = CreateGroup()
        ..enumUnitsInRect(GetPlayableMapRect(), Filter(() -> GetFilterUnit().getOwner() == temp))
    for u in grp
        u.remove()
    grp.destr()
    // Count finished players
    playersFinishedCount += 1
    if (playersFinishedCount >= PlayersInGame)
        finishSelection()

function finishSelection()
    // Cleanup timer diag and timer
    TimerDialogDisplay(selectionTimerDiag, false)
    DestroyTimerDialog(selectionTimerDiag)
    selectionTimer.destr()
    printTimed(kStrGreen + "Assigning roles to remaining players...", 30)
    // Pick random heros for players that are in game but haven't picked. No random empires.
    CreateForce()
        ..enumPlayers(Filter(() -> GetFilterPlayer().isActive()))
        ..forEach(() -> begin
            let p = GetEnumPlayer()
            if p.getRole() == PlayerRole.NONE
                p.setRole(PlayerRole.Hero)
            if p.getRole() == PlayerRole.Hero and p.getHeroClass() == HeroClass.NONE
                p.setHeroClass(pickRandomHeroClass())
                printTimed(kStrBlue + p.getName() + " has been assigned the role of |r" + kStrGold + "Hero|r" + kStrBlue + " with class |r" + kStrGold + p.getHeroClass().getName() + kStrBlue + ".", 30)
        end)
        ..destr()
    
    // Remove all units on the map
    let grp = CreateGroup()
    grp.enumUnitsInRect(GetPlayableMapRect())
    for u in grp
        u.remove()
    printTimed("   ", 30)
    printTimed(kStrGreen + "Finalizing selections", 30)
    
    // Turn off triggers
    classSelectionTrg.destr()
    roleSelectTrg.destr()
    deselectTrigger.destr()

    CreateTimer()
        ..start(7, function spawnStartingUnits)



function gameStart()
    // Start a timer
    selectionTimer = CreateTimer()
    selectionTimer.start(kSelectionTime, () -> finishSelection())
    selectionTimerDiag = CreateTimerDialog(selectionTimer)
    TimerDialogSetTitle(selectionTimerDiag, "Selection: ")
    TimerDialogDisplay(selectionTimerDiag, true)
    
    // ### Create some triggers
    deselectTrigger = CreateTrigger()
    deselectTrigger.addAction(() -> begin
        fixPlayerSelection(GetTriggerPlayer())
    end)
    // Selection triggers
    roleSelectTrg = CreateTrigger()
    classSelectionTrg = CreateTrigger()
    classSelectionTrg.addAction(function selectClass)

    // Create two taverns.
    let roleTavern = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), kUID_RoleTavern, 0, 0, 0)
    classTavern = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), kUID_ClassTavern, 0, 0, 0)
    
    for i = 0 to 24
        selectedUnit[i] = roleTavern
    // Register actions for role selection 
    roleSelectTrg.registerUnitEvent(roleTavern, EVENT_UNIT_SELL)
    roleSelectTrg.addAction(() -> begin
        if GetSoldUnit().getTypeId() == kUID_RoleHero
            selectedUnit[GetBuyingUnit().getOwner().getId()] = classTavern
            fixPlayerSelection(GetBuyingUnit().getOwner())
            GetBuyingUnit().getOwner().setRole(PlayerRole.Hero)
        else 
            selectedUnit[GetBuyingUnit().getOwner().getId()] = null
            fixPlayerSelection(GetBuyingUnit().getOwner())
            GetBuyingUnit().getOwner().setRole(PlayerRole.Empire)
            finishSelectionForPlayer(GetBuyingUnit().getOwner())
        GetSoldUnit().remove()
    end)
    //Register actions for class selection
    classSelectionTrg.registerUnitEvent(classTavern, EVENT_UNIT_SELL)

    
    // Create selectors for all players.
    CreateForce()
        ..enumPlayers(Filter(() -> GetFilterPlayer().isActive()))
        ..forEach(() -> begin
            CreateUnit(GetEnumPlayer(), kUID_Selector, 0, 0, 0)
            deselectTrigger.registerPlayerUnitEvent(GetEnumPlayer(), EVENT_PLAYER_UNIT_DESELECTED, null)
            deselectTrigger.registerPlayerUnitEvent(GetEnumPlayer(), EVENT_PLAYER_UNIT_SELECTED, null)
        end)
        ..destr()
    // Select the tavern for the players
    CreateTimer()..start(0.1, () -> begin
        CreateForce()
            ..enumPlayers(null)
            ..forEach(() -> begin
                fixPlayerSelection(GetEnumPlayer())
            end)
            ..destr()
        GetExpiredTimer().destr()
    end)
    
    // print message
    printTimed(kStrGreen + "Please select your role.", 30)
    // Clean up the expiring timer.
    GetExpiredTimer().destr()


init
    let duration = 3.0
    printTimed("Please wait while initialization finishes...", duration)
    CreateTimer()..start(duration, function gameStart)
    registerPlayerEvent(EVENT_PLAYER_LEAVE, () -> begin
        printTimed(kStrGold + GetTriggerPlayer().getName() + "|r" + kStrBlue + " has left the game.", 15)
        GetTriggerPlayer().setRole(PlayerRole.NONE)
        let grp = CreateGroup()
            ..enumUnitsInRect(GetPlayableMapRect(), Filter(() -> GetFilterUnit().getOwner() == GetTriggerPlayer()))
        for u in grp
            u.remove()
        grp.destr()
    end)

function getPurchasableOption(int id) returns UnitDefinition
    return new UnitDefinition(id, 'hfoo')
        ..setName("")
        ..setTooltipBasic("DEFAULT PURCHASABLE OBJECT")
        ..setTooltipExtended("")
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setFoodCost(0)
        ..setBuildTime(0)
        ..setStockStartDelay(0)
        ..setStockMaximum(1)
        ..setStockReplenishInterval(1)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setModelFile("dummy.mdl")
        ..setUnitSoundSet("")
        ..setCollisionSize(0)
        ..setDeathTimeseconds(0)
        ..setDeathType(0)
        ..setMovementType(MovementType.Fly)
        ..setHideMinimapDisplay(true)
        ..setSelectionScale(-1)
        ..setShadowImageHeight(0)
        ..setShadowImageWidth(0)
        ..setButtonPositionX(0)
        ..setButtonPositionY(0)

function createTavern(int id, string name, string sold) returns BuildingDefinition
    return new BuildingDefinition(id, 'hhou')
        ..setNormalAbilities("Ane2,Avul")
        ..setScalingValue(0.8)
        ..setUnitSoundSet(Soundsets.tavern)
        ..setHitPointsMaximumBase(1000)
        ..setUnitsSold(sold)
        ..setModelFile(Buildings.tavern1)
        ..setSightRadiusDay(1)
        ..setSightRadiusNight(1)
        ..setName(name)
        ..setPathingMap("")
        ..setFoodProduced(0)
        ..setUpgradesUsed("")

@compiletime function genSelectionUnits()
    getPurchasableOption(kUID_Selector)
        ..setNormalAbilities("Avul")
        ..setSightRadiusDay(100)
        ..setSightRadiusNight(100)
    // Role selctors
    getPurchasableOption(kUID_RoleEmpire)
        ..setName("Select Empire")
        ..setTooltipBasic("Select Empire [|cffffcc00W|r]")
        ..setTooltipExtended("Empire players oversee a vast kingdoms and provide protection and housing for the citizens of the land. Control an army of units and workers to claim land and build your empire. Can raise an army, build defenses, and hire heroes. \n\n" + kStrHint + "Suggested prior experience playing this game.")
        ..setHotkey("W")
        ..setButtonPositionX(1)
        ..setButtonPositionY(0)
        ..setIconGameInterface(Icons.bTNCastle)
        ..setUnitSoundSet(Soundsets.peasant)
    getPurchasableOption(kUID_RoleHero)
        ..setName("Select Hero")
        ..setTooltipBasic("Select Hero [|cffffcc00Q|r]")
        ..setTooltipExtended("Hero players take of the mantle of champion as a powerful individual. Work together with other heroes or empires to complete quests and defend the world from the forces or evil or become a hired hand at the beck of a powerful empire. The path you take is yours to choose.\n\n" + kStrHint + "Class and Role selection next screen.")
        ..setHotkey("Q")
        ..setIconGameInterface(Icons.bTNDivineIntervention)
        ..setUnitSoundSet(Soundsets.heroPaladin)
    createTavern(kUID_RoleTavern, "Role Selection", int2fourchar(kUID_RoleEmpire) + "," + int2fourchar(kUID_RoleHero))
    // Hero class selection
    getPurchasableOption(kUID_ClassFighter)
        ..setName("Select Fighter Class")
        ..setTooltipBasic("Select Fighter Class [|cffffcc00Q|r]")
        ..setTooltipExtended("Fighters are strength based fighters warriors who excel with the sword. \n\n" + kStrHint + "Starts with level 5 sword.|r")
        ..setHotkey("Q")
        ..setIconGameInterface(Icons.bTNArthas)
        ..setUnitSoundSet(Soundsets.arthas)
    getPurchasableOption(kUID_ClassRanger)
        ..setName("Select Ranger Class")
        ..setTooltipBasic("Select Ranger Class [|cffffcc00W|r]")
        ..setTooltipExtended("Rangers are mobile agility heroes who specialize in using the bow. \n\n" + kStrHint + "Starts with level 5 bow.|r")
        ..setHotkey("W")
        ..setButtonPositionX(1)
        ..setIconGameInterface(Icons.bTNSylvanusWindRunner)
        ..setUnitSoundSet(Soundsets.sylvanusWindrunner)
    getPurchasableOption(kUID_ClassWizard)
        ..setName("Select Wizard Class")
        ..setTooltipBasic("Select Wizard Class [|cffffcc00E|r]")
        ..setTooltipExtended("Wizards a magical casters who focus on the practice of arcane magics. \n\n" + kStrHint + "Starts with level 5 magic.")
        ..setHotkey("E")
        ..setButtonPositionX(2)
        ..setIconGameInterface(Icons.bTNJaina)
        ..setUnitSoundSet(Soundsets.jaina)
    getPurchasableOption(kUID_ClassRandom)
        ..setName("Select Random Class")
        ..setTooltipBasic("Select a Class at Random [|cffffccZ|r]")
        ..setTooltipExtended("Let the winds of fate decide which hero class you will player. A small reward will be given to random champions.\n\n" + kStrHint + "Class will be randomly selected after everyone picks. Will try to avoid duplicate classes if possible.")
        ..setHotkey("Z")
        ..setButtonPositionY(2)
        ..setIconGameInterface(Icons.bTNSelectHeroOn)
        ..setUnitSoundSet(Soundsets.albatross)
    createTavern(kUID_ClassTavern, "Hero Class Selection", int2fourchar(kUID_ClassFighter) + "," + int2fourchar(kUID_ClassRanger) + "," + int2fourchar(kUID_ClassWizard) + "," + int2fourchar(kUID_ClassRandom))


        

    